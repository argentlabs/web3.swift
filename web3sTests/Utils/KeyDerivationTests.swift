//
//  web3.swift
//  Copyright Â© 2022 Argent Labs Limited. All rights reserved.
//

import XCTest
@testable import web3

class KeyDerivationTests: XCTestCase {

    override func setUp() {
        super.setUp()
    }

    override func tearDown() {
        super.tearDown()
    }

    func testSha256Round4096() {
        let derivator = KeyDerivator(algorithm: .pbkdf2sha256, dklen: 32, round: 4096)
        let result = derivator.deriveKey(key: "password", salt: "salt")!

        let expected = Data( [0xc5, 0xe4, 0x78, 0xd5, 0x92, 0x88, 0xc8, 0x41, 0xaa, 0x53, 0x0d, 0xb6, 0x84, 0x5c, 0x4c, 0x8d, 0x96, 0x28, 0x93, 0xa0, 0x01, 0xce, 0x4e, 0x11, 0xa4, 0x96, 0x38, 0x73, 0xaa, 0x98, 0x13, 0x4a])

        XCTAssertEqual(result, expected)
    }

    func testSha256Round80000() {
        let derivator = KeyDerivator(algorithm: .pbkdf2sha256, dklen: 64, round: 80000)
        let result = derivator.deriveKey(key: "Password", salt: "NaCl")!

        let expected = Data( [0x4d, 0xdc, 0xd8, 0xf6, 0x0b, 0x98, 0xbe, 0x21, 0x83, 0x0c, 0xee, 0x5e, 0xf2, 0x27, 0x01, 0xf9, 0x64, 0x1a, 0x44, 0x18, 0xd0, 0x4c, 0x04, 0x14, 0xae, 0xff, 0x08, 0x87, 0x6b, 0x34, 0xab, 0x56, 0xa1, 0xd4, 0x25, 0xa1, 0x22, 0x58, 0x33, 0x54, 0x9a, 0xdb, 0x84, 0x1b, 0x51, 0xc9, 0xb3, 0x17, 0x6a, 0x27, 0x2b, 0xde, 0xbb, 0xa1, 0xd0, 0x78, 0x47, 0x8f, 0x62, 0xb3, 0x97, 0xf3, 0x3c, 0x8d])

        XCTAssertEqual(result, expected)
    }

    func testSha256Round4096CryptoSwift() {
        // CryptoSwift implementation of PBKD2 is much slower on Debug builds, so testing it with more rounds
        // is not feasible, we'll test only the smaller round number.
        let derivator = KeyDerivator(algorithm: .pbkdf2sha256, dklen: 32, round: 4096)
        let result = derivator.deriveKey(key: "password", salt: "salt", forceCryptoSwiftImplementation: true)!

        let expected = Data( [0xc5, 0xe4, 0x78, 0xd5, 0x92, 0x88, 0xc8, 0x41, 0xaa, 0x53, 0x0d, 0xb6, 0x84, 0x5c, 0x4c, 0x8d, 0x96, 0x28, 0x93, 0xa0, 0x01, 0xce, 0x4e, 0x11, 0xa4, 0x96, 0x38, 0x73, 0xaa, 0x98, 0x13, 0x4a])

        XCTAssertEqual(result, expected)
    }
}
